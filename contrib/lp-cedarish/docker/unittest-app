#!/bin/bash
# Copyright 2014 - Rackspace Hosting
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


# Solum App Unit Test Script for Docker

SCRIPT_START_TIME=$(date +"%s")

PROJECT_ID=${PROJECT_ID:-null}
BUILD_ID=${BUILD_ID:-null}
TASKNAME=unittest
DOCKER_REGISTRY=${DOCKER_REGISTRY:-'127.0.0.1:5042'}

# TLOG, PRUN, ENSURE_LOGFILE, and elapsed defined in app-common
source $(dirname $0)/app-common

LOG_FILE=$(GET_LOGFILE)

TLOG ===== Starting Test Script $0 $*

# Check command line arguments
if [ $# -lt 4 ]; then
  TLOG Usage: $0 git_url git_branch tenant unit_test_entry_point
  exit 1
fi

PRUN silent docker ps
[[ $? != 0 ]] && TLOG Cannot talk to docker. && exit 1

GIT=$1
shift
GIT_BRANCH=$1
shift
TENANT=$1
shift

ENTRYPOINT="$@"
shift

TLOG "Executing test command $ENTRYPOINT"

BASE_DIR=/dev/shm
DIR_NAME=$(mktemp -u XXXXXXXXXXXXXXXXXXXXXXX | tr '[:upper:]' '[:lower:]' | head -n 1)

APP_DIR=$BASE_DIR/solum/$DIR_NAME
rm -rf $APP_DIR
PRUN mkdir -p $APP_DIR

PRUN git clone $GIT --single-branch -b $GIT_BRANCH $APP_DIR/code
cd $APP_DIR/code
COMMIT_ID=$(git log -1 --pretty=%H)

# Test the application code
TLOG "===>" Testing App

if [[ $(which drone) ]]; then
  TLOG "===>" Using Drone
  if [[ ! -e $APP_DIR/code/.drone.yml ]]; then
    TLOG "===>" Creating .drone.yml
cat << EOF > $APP_DIR/code/.drone.yml
image: $DOCKER_REGISTRY/slugtester
script: $ENTRYPOINT
EOF
  else
    TLOG "===>" .drone.yml found in source
  fi
  sudo /usr/local/bin/drone build $APP_DIR/code 2>&1 > >(while read LINE; do TLOG $LINE; done)
else
  TLOG Creating Dockerfile
cat << EOF > $APP_DIR/Dockerfile
# SOLUM APP BUILDER
FROM $DOCKER_REGISTRY/slugtester
ADD code /code
WORKDIR /code
RUN ${ENTRYPOINT}
EOF

  cd $APP_DIR
  sudo docker build --rm -t $DIR_NAME . 2>&1 > >(while read LINE; do TLOG $LINE; done)
fi

SUCCESS=$?
TLOG Tests finished with status $SUCCESS.

TOTAL_TIME=$(elapsed $SCRIPT_START_TIME)
TLOG ===== Total elapsed time: $TOTAL_TIME sec

# Return 0 if the tests went well, or 1 otherwise.
[[ $SUCCESS = 0 ]] && exit 0 || exit 1
